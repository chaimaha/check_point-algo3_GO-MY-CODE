// 1 )

PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER, VAR dot : INTEGER)
VAR
    i : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length != v2.length) THEN
        Write("we cannot calculat product");
        dot = NaN;
    END_IF
    WHILE (i <v1.length ) DO
        dot = dot + v1[i]*v2[i];
    END_WHILE
END
// 2) 
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [20];
    dot : INTEGER;
BEGIN
    // Read v1'size
    n1 := read_size();
    // Read v1'element 
    read_array(n1,v1);
    // Read v2'size
    n2 := read_size();
    // Read v2'element
    read_array(n2,v2);
    dot_product(v1,v2,dot);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END

// 3)

FUNCTION dot_product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i, dot : INTEGER;
BEGIN
    dot :=0;
    i:=0;
    IF (v1.length != sv2.length) THEN
        Write(" we cannot calculat  product");
        RETURN NaN;
    END_IF
    WHILE (i <v1.length ) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
    RETURN dot ;
END

ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [];
    dot : INTEGER;
BEGIN
    // Read v1'size
    n1 := read_size();
    // Read va'element 
    read_array(n1,v1);
    // Read V2'size 
    n2 := read_size();
    // Read V2'element
    read_array(n2,v2);
    dot := dot_product(v1,v2);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END